// File: chat/chat.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: internal/chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChatService_SendMessage_FullMethodName            = "/chat.ChatService/SendMessage"
	ChatService_ReceiveMessages_FullMethodName        = "/chat.ChatService/ReceiveMessages"
	ChatService_UpdateMessageStatus_FullMethodName    = "/chat.ChatService/UpdateMessageStatus"
	ChatService_ReplyToMessage_FullMethodName         = "/chat.ChatService/ReplyToMessage"
	ChatService_ForwardMessage_FullMethodName         = "/chat.ChatService/ForwardMessage"
	ChatService_CreatePublicGroupChat_FullMethodName  = "/chat.ChatService/CreatePublicGroupChat"
	ChatService_CreatePrivateGroupChat_FullMethodName = "/chat.ChatService/CreatePrivateGroupChat"
	ChatService_JoinPublicGroupChat_FullMethodName    = "/chat.ChatService/JoinPublicGroupChat"
	ChatService_CreateChatInvitation_FullMethodName   = "/chat.ChatService/CreateChatInvitation"
	ChatService_JoinPrivateGroupChat_FullMethodName   = "/chat.ChatService/JoinPrivateGroupChat"
	ChatService_UpdateGroupInfo_FullMethodName        = "/chat.ChatService/UpdateGroupInfo"
	ChatService_DeleteMessage_FullMethodName          = "/chat.ChatService/DeleteMessage"
	ChatService_BanUser_FullMethodName                = "/chat.ChatService/BanUser"
	ChatService_UnbanUser_FullMethodName              = "/chat.ChatService/UnbanUser"
	ChatService_CreateInviteLink_FullMethodName       = "/chat.ChatService/CreateInviteLink"
	ChatService_PinMessage_FullMethodName             = "/chat.ChatService/PinMessage"
	ChatService_UnpinMessage_FullMethodName           = "/chat.ChatService/UnpinMessage"
	ChatService_UpdateUserRole_FullMethodName         = "/chat.ChatService/UpdateUserRole"
	ChatService_CreateCustomRole_FullMethodName       = "/chat.ChatService/CreateCustomRole"
	ChatService_CreateRoom_FullMethodName             = "/chat.ChatService/CreateRoom"
	ChatService_UpdateRoom_FullMethodName             = "/chat.ChatService/UpdateRoom"
	ChatService_DeleteRoom_FullMethodName             = "/chat.ChatService/DeleteRoom"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	ReceiveMessages(ctx context.Context, in *ReceiveMessagesRequest, opts ...grpc.CallOption) (ChatService_ReceiveMessagesClient, error)
	UpdateMessageStatus(ctx context.Context, in *UpdateMessageStatusRequest, opts ...grpc.CallOption) (*UpdateMessageStatusResponse, error)
	ReplyToMessage(ctx context.Context, in *ReplyToMessageRequest, opts ...grpc.CallOption) (*ReplyToMessageResponse, error)
	ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageResponse, error)
	CreatePublicGroupChat(ctx context.Context, in *CreatePublicGroupChatRequest, opts ...grpc.CallOption) (*CreatePublicGroupChatResponse, error)
	CreatePrivateGroupChat(ctx context.Context, in *CreatePrivateGroupChatRequest, opts ...grpc.CallOption) (*CreatePrivateGroupChatResponse, error)
	JoinPublicGroupChat(ctx context.Context, in *JoinPublicGroupChatRequest, opts ...grpc.CallOption) (*JoinPublicGroupChatResponse, error)
	CreateChatInvitation(ctx context.Context, in *CreateChatInvitationRequest, opts ...grpc.CallOption) (*CreateChatInvitationResponse, error)
	JoinPrivateGroupChat(ctx context.Context, in *JoinPrivateGroupChatRequest, opts ...grpc.CallOption) (*JoinPrivateGroupChatResponse, error)
	UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error)
	UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*UnbanUserResponse, error)
	CreateInviteLink(ctx context.Context, in *CreateInviteLinkRequest, opts ...grpc.CallOption) (*CreateInviteLinkResponse, error)
	PinMessage(ctx context.Context, in *PinMessageRequest, opts ...grpc.CallOption) (*PinMessageResponse, error)
	UnpinMessage(ctx context.Context, in *UnpinMessageRequest, opts ...grpc.CallOption) (*UnpinMessageResponse, error)
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error)
	CreateCustomRole(ctx context.Context, in *CreateCustomRoleRequest, opts ...grpc.CallOption) (*CreateCustomRoleResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReceiveMessages(ctx context.Context, in *ReceiveMessagesRequest, opts ...grpc.CallOption) (ChatService_ReceiveMessagesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_ReceiveMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceReceiveMessagesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ReceiveMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceReceiveMessagesClient struct {
	grpc.ClientStream
}

func (x *chatServiceReceiveMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) UpdateMessageStatus(ctx context.Context, in *UpdateMessageStatusRequest, opts ...grpc.CallOption) (*UpdateMessageStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMessageStatusResponse)
	err := c.cc.Invoke(ctx, ChatService_UpdateMessageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ReplyToMessage(ctx context.Context, in *ReplyToMessageRequest, opts ...grpc.CallOption) (*ReplyToMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyToMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_ReplyToMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*ForwardMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_ForwardMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreatePublicGroupChat(ctx context.Context, in *CreatePublicGroupChatRequest, opts ...grpc.CallOption) (*CreatePublicGroupChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePublicGroupChatResponse)
	err := c.cc.Invoke(ctx, ChatService_CreatePublicGroupChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreatePrivateGroupChat(ctx context.Context, in *CreatePrivateGroupChatRequest, opts ...grpc.CallOption) (*CreatePrivateGroupChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrivateGroupChatResponse)
	err := c.cc.Invoke(ctx, ChatService_CreatePrivateGroupChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinPublicGroupChat(ctx context.Context, in *JoinPublicGroupChatRequest, opts ...grpc.CallOption) (*JoinPublicGroupChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinPublicGroupChatResponse)
	err := c.cc.Invoke(ctx, ChatService_JoinPublicGroupChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateChatInvitation(ctx context.Context, in *CreateChatInvitationRequest, opts ...grpc.CallOption) (*CreateChatInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatInvitationResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateChatInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinPrivateGroupChat(ctx context.Context, in *JoinPrivateGroupChatRequest, opts ...grpc.CallOption) (*JoinPrivateGroupChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinPrivateGroupChatResponse)
	err := c.cc.Invoke(ctx, ChatService_JoinPrivateGroupChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateGroupInfo(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGroupInfoResponse)
	err := c.cc.Invoke(ctx, ChatService_UpdateGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanUserResponse)
	err := c.cc.Invoke(ctx, ChatService_BanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*UnbanUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbanUserResponse)
	err := c.cc.Invoke(ctx, ChatService_UnbanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateInviteLink(ctx context.Context, in *CreateInviteLinkRequest, opts ...grpc.CallOption) (*CreateInviteLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInviteLinkResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateInviteLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) PinMessage(ctx context.Context, in *PinMessageRequest, opts ...grpc.CallOption) (*PinMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_PinMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UnpinMessage(ctx context.Context, in *UnpinMessageRequest, opts ...grpc.CallOption) (*UnpinMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpinMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_UnpinMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRoleResponse)
	err := c.cc.Invoke(ctx, ChatService_UpdateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateCustomRole(ctx context.Context, in *CreateCustomRoleRequest, opts ...grpc.CallOption) (*CreateCustomRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomRoleResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateCustomRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, ChatService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoomResponse)
	err := c.cc.Invoke(ctx, ChatService_UpdateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, ChatService_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	ReceiveMessages(*ReceiveMessagesRequest, ChatService_ReceiveMessagesServer) error
	UpdateMessageStatus(context.Context, *UpdateMessageStatusRequest) (*UpdateMessageStatusResponse, error)
	ReplyToMessage(context.Context, *ReplyToMessageRequest) (*ReplyToMessageResponse, error)
	ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageResponse, error)
	CreatePublicGroupChat(context.Context, *CreatePublicGroupChatRequest) (*CreatePublicGroupChatResponse, error)
	CreatePrivateGroupChat(context.Context, *CreatePrivateGroupChatRequest) (*CreatePrivateGroupChatResponse, error)
	JoinPublicGroupChat(context.Context, *JoinPublicGroupChatRequest) (*JoinPublicGroupChatResponse, error)
	CreateChatInvitation(context.Context, *CreateChatInvitationRequest) (*CreateChatInvitationResponse, error)
	JoinPrivateGroupChat(context.Context, *JoinPrivateGroupChatRequest) (*JoinPrivateGroupChatResponse, error)
	UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error)
	UnbanUser(context.Context, *UnbanUserRequest) (*UnbanUserResponse, error)
	CreateInviteLink(context.Context, *CreateInviteLinkRequest) (*CreateInviteLinkResponse, error)
	PinMessage(context.Context, *PinMessageRequest) (*PinMessageResponse, error)
	UnpinMessage(context.Context, *UnpinMessageRequest) (*UnpinMessageResponse, error)
	UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error)
	CreateCustomRole(context.Context, *CreateCustomRoleRequest) (*CreateCustomRoleResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) ReceiveMessages(*ReceiveMessagesRequest, ChatService_ReceiveMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedChatServiceServer) UpdateMessageStatus(context.Context, *UpdateMessageStatusRequest) (*UpdateMessageStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageStatus not implemented")
}
func (UnimplementedChatServiceServer) ReplyToMessage(context.Context, *ReplyToMessageRequest) (*ReplyToMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyToMessage not implemented")
}
func (UnimplementedChatServiceServer) ForwardMessage(context.Context, *ForwardMessageRequest) (*ForwardMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMessage not implemented")
}
func (UnimplementedChatServiceServer) CreatePublicGroupChat(context.Context, *CreatePublicGroupChatRequest) (*CreatePublicGroupChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicGroupChat not implemented")
}
func (UnimplementedChatServiceServer) CreatePrivateGroupChat(context.Context, *CreatePrivateGroupChatRequest) (*CreatePrivateGroupChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateGroupChat not implemented")
}
func (UnimplementedChatServiceServer) JoinPublicGroupChat(context.Context, *JoinPublicGroupChatRequest) (*JoinPublicGroupChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPublicGroupChat not implemented")
}
func (UnimplementedChatServiceServer) CreateChatInvitation(context.Context, *CreateChatInvitationRequest) (*CreateChatInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatInvitation not implemented")
}
func (UnimplementedChatServiceServer) JoinPrivateGroupChat(context.Context, *JoinPrivateGroupChatRequest) (*JoinPrivateGroupChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPrivateGroupChat not implemented")
}
func (UnimplementedChatServiceServer) UpdateGroupInfo(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInfo not implemented")
}
func (UnimplementedChatServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedChatServiceServer) BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedChatServiceServer) UnbanUser(context.Context, *UnbanUserRequest) (*UnbanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUser not implemented")
}
func (UnimplementedChatServiceServer) CreateInviteLink(context.Context, *CreateInviteLinkRequest) (*CreateInviteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteLink not implemented")
}
func (UnimplementedChatServiceServer) PinMessage(context.Context, *PinMessageRequest) (*PinMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinMessage not implemented")
}
func (UnimplementedChatServiceServer) UnpinMessage(context.Context, *UnpinMessageRequest) (*UnpinMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinMessage not implemented")
}
func (UnimplementedChatServiceServer) UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedChatServiceServer) CreateCustomRole(context.Context, *CreateCustomRoleRequest) (*CreateCustomRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomRole not implemented")
}
func (UnimplementedChatServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedChatServiceServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedChatServiceServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ReceiveMessages(m, &chatServiceReceiveMessagesServer{ServerStream: stream})
}

type ChatService_ReceiveMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatServiceReceiveMessagesServer struct {
	grpc.ServerStream
}

func (x *chatServiceReceiveMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_UpdateMessageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMessageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateMessageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMessageStatus(ctx, req.(*UpdateMessageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ReplyToMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyToMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ReplyToMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ReplyToMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ReplyToMessage(ctx, req.(*ReplyToMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ForwardMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ForwardMessage(ctx, req.(*ForwardMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreatePublicGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicGroupChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreatePublicGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreatePublicGroupChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreatePublicGroupChat(ctx, req.(*CreatePublicGroupChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreatePrivateGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateGroupChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreatePrivateGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreatePrivateGroupChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreatePrivateGroupChat(ctx, req.(*CreatePrivateGroupChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinPublicGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPublicGroupChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinPublicGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_JoinPublicGroupChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinPublicGroupChat(ctx, req.(*JoinPublicGroupChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateChatInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChatInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateChatInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChatInvitation(ctx, req.(*CreateChatInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinPrivateGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPrivateGroupChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinPrivateGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_JoinPrivateGroupChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinPrivateGroupChat(ctx, req.(*JoinPrivateGroupChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateGroupInfo(ctx, req.(*UpdateGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_BanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UnbanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UnbanUser(ctx, req.(*UnbanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateInviteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateInviteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateInviteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateInviteLink(ctx, req.(*CreateInviteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_PinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).PinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_PinMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).PinMessage(ctx, req.(*PinMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UnpinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UnpinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UnpinMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UnpinMessage(ctx, req.(*UnpinMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateUserRole(ctx, req.(*UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateCustomRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateCustomRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateCustomRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateCustomRole(ctx, req.(*CreateCustomRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "UpdateMessageStatus",
			Handler:    _ChatService_UpdateMessageStatus_Handler,
		},
		{
			MethodName: "ReplyToMessage",
			Handler:    _ChatService_ReplyToMessage_Handler,
		},
		{
			MethodName: "ForwardMessage",
			Handler:    _ChatService_ForwardMessage_Handler,
		},
		{
			MethodName: "CreatePublicGroupChat",
			Handler:    _ChatService_CreatePublicGroupChat_Handler,
		},
		{
			MethodName: "CreatePrivateGroupChat",
			Handler:    _ChatService_CreatePrivateGroupChat_Handler,
		},
		{
			MethodName: "JoinPublicGroupChat",
			Handler:    _ChatService_JoinPublicGroupChat_Handler,
		},
		{
			MethodName: "CreateChatInvitation",
			Handler:    _ChatService_CreateChatInvitation_Handler,
		},
		{
			MethodName: "JoinPrivateGroupChat",
			Handler:    _ChatService_JoinPrivateGroupChat_Handler,
		},
		{
			MethodName: "UpdateGroupInfo",
			Handler:    _ChatService_UpdateGroupInfo_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatService_DeleteMessage_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _ChatService_BanUser_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _ChatService_UnbanUser_Handler,
		},
		{
			MethodName: "CreateInviteLink",
			Handler:    _ChatService_CreateInviteLink_Handler,
		},
		{
			MethodName: "PinMessage",
			Handler:    _ChatService_PinMessage_Handler,
		},
		{
			MethodName: "UnpinMessage",
			Handler:    _ChatService_UnpinMessage_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _ChatService_UpdateUserRole_Handler,
		},
		{
			MethodName: "CreateCustomRole",
			Handler:    _ChatService_CreateCustomRole_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _ChatService_CreateRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _ChatService_UpdateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _ChatService_DeleteRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _ChatService_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/chat/chat.proto",
}

const (
	UserStatusService_UpdateStatus_FullMethodName         = "/chat.UserStatusService/UpdateStatus"
	UserStatusService_UpdateActivity_FullMethodName       = "/chat.UserStatusService/UpdateActivity"
	UserStatusService_ReceiveStatusUpdates_FullMethodName = "/chat.UserStatusService/ReceiveStatusUpdates"
)

// UserStatusServiceClient is the client API for UserStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStatusServiceClient interface {
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*UpdateActivityResponse, error)
	ReceiveStatusUpdates(ctx context.Context, in *ReceiveStatusUpdatesRequest, opts ...grpc.CallOption) (UserStatusService_ReceiveStatusUpdatesClient, error)
}

type userStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStatusServiceClient(cc grpc.ClientConnInterface) UserStatusServiceClient {
	return &userStatusServiceClient{cc}
}

func (c *userStatusServiceClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, UserStatusService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*UpdateActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateActivityResponse)
	err := c.cc.Invoke(ctx, UserStatusService_UpdateActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusServiceClient) ReceiveStatusUpdates(ctx context.Context, in *ReceiveStatusUpdatesRequest, opts ...grpc.CallOption) (UserStatusService_ReceiveStatusUpdatesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserStatusService_ServiceDesc.Streams[0], UserStatusService_ReceiveStatusUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &userStatusServiceReceiveStatusUpdatesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserStatusService_ReceiveStatusUpdatesClient interface {
	Recv() (*StatusUpdateResponse, error)
	grpc.ClientStream
}

type userStatusServiceReceiveStatusUpdatesClient struct {
	grpc.ClientStream
}

func (x *userStatusServiceReceiveStatusUpdatesClient) Recv() (*StatusUpdateResponse, error) {
	m := new(StatusUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserStatusServiceServer is the server API for UserStatusService service.
// All implementations must embed UnimplementedUserStatusServiceServer
// for forward compatibility
type UserStatusServiceServer interface {
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	UpdateActivity(context.Context, *UpdateActivityRequest) (*UpdateActivityResponse, error)
	ReceiveStatusUpdates(*ReceiveStatusUpdatesRequest, UserStatusService_ReceiveStatusUpdatesServer) error
	mustEmbedUnimplementedUserStatusServiceServer()
}

// UnimplementedUserStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserStatusServiceServer struct {
}

func (UnimplementedUserStatusServiceServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedUserStatusServiceServer) UpdateActivity(context.Context, *UpdateActivityRequest) (*UpdateActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivity not implemented")
}
func (UnimplementedUserStatusServiceServer) ReceiveStatusUpdates(*ReceiveStatusUpdatesRequest, UserStatusService_ReceiveStatusUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveStatusUpdates not implemented")
}
func (UnimplementedUserStatusServiceServer) mustEmbedUnimplementedUserStatusServiceServer() {}

// UnsafeUserStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStatusServiceServer will
// result in compilation errors.
type UnsafeUserStatusServiceServer interface {
	mustEmbedUnimplementedUserStatusServiceServer()
}

func RegisterUserStatusServiceServer(s grpc.ServiceRegistrar, srv UserStatusServiceServer) {
	s.RegisterService(&UserStatusService_ServiceDesc, srv)
}

func _UserStatusService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_UpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStatusServiceServer).UpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStatusService_UpdateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStatusServiceServer).UpdateActivity(ctx, req.(*UpdateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStatusService_ReceiveStatusUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveStatusUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserStatusServiceServer).ReceiveStatusUpdates(m, &userStatusServiceReceiveStatusUpdatesServer{ServerStream: stream})
}

type UserStatusService_ReceiveStatusUpdatesServer interface {
	Send(*StatusUpdateResponse) error
	grpc.ServerStream
}

type userStatusServiceReceiveStatusUpdatesServer struct {
	grpc.ServerStream
}

func (x *userStatusServiceReceiveStatusUpdatesServer) Send(m *StatusUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UserStatusService_ServiceDesc is the grpc.ServiceDesc for UserStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.UserStatusService",
	HandlerType: (*UserStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStatus",
			Handler:    _UserStatusService_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdateActivity",
			Handler:    _UserStatusService_UpdateActivity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveStatusUpdates",
			Handler:       _UserStatusService_ReceiveStatusUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/chat/chat.proto",
}
